Installing:

dependencies:
libpython-dev python-numpy

server dependencies (autopilot implementation)
python-gps python-serial python-scipy swig RTIMULib2

lcd viewer
python-pillow

webapp
python-flask

client dependencies (viewers control applications)
python-opengl python-pip
pip install pyglet
pip install pywavefront

sudo apt-get install swig python-numpy python-scipy python-serial python-gps python-PIL python-dev

# my version of rtimulib is required!
git clone https://github.com/seandepagnier/RTIMULib2

python setup.py build
sudo python setup.py install


pypilot.build is a build script to build tinycore linux packages
it can be run to update the packages in tinypilot




This collection of scripts are the building blocks of a simple autopilot

install:

pip install PyOpenGL
sudo apt-get install python-numpy python-scipy

most of the scripts can be run individually as standalone
or test programs, some function as clients, other as servers


servers (each of these run a signalk server)

signalk/server.py -- implements poll based server allowing external manipulation, basic demo server
signalk/pipeserver.py -- implements sockets in a separate process communicating to the main process via a pipe.  This allows the main process to be high priority or realtime scheduled
pypilot/boatimu.py -- specialized imu specific to boat motions
               includes automatic 2d/3d calibration and alignment of magnetic sensors
pypilot/nmea.py -- signalk <-> nmea0183 translator
pypilot/servo.py -- controls servo via RC pwm signal, and gpio feedback for fault

the autopilot servers below contain boatimu, nmea, and servo:
pypilot/simple_autopilot.py -- classic PID based autopilot implementation
pypilot/basic_autopilot.py -- basic PID based autopilot with additional gains and filters



clients:

signalk/client.py -- console client
signalk/client_wx.py -- graphical user version
signalk/scope.py -- glut plot client
signalk/scope_wx.py -- plot client with selectable fields

ui/autopilot_control.py -- simple interface to command autopilot
ui/autopilot_calibration.py -- interactive gui for all autopilot calibrations
ui/kivy -- work in progress kivy control app

lcd/client.py -- simple control interface using GPIO pins. linux framebuffer, glut, and nokia5110 lcd outputs are supported
webapp/webapp.py -- python flask application that runs a webserver providing remote autopilot control through a web browser
